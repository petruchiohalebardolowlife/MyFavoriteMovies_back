
package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"log"
	"myfavouritemovies/repository"
	"myfavouritemovies/structs"
)

// ID is the resolver for the id field.
func (r *favoriteGenreResolver) ID(ctx context.Context, obj *structs.FavoriteGenre) (int32, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the userId field.
func (r *favoriteGenreResolver) UserID(ctx context.Context, obj *structs.FavoriteGenre) (int32, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// GenreID is the resolver for the genreId field.
func (r *favoriteGenreResolver) GenreID(ctx context.Context, obj *structs.FavoriteGenre) (int32, error) {
	panic(fmt.Errorf("not implemented: GenreID - genreId"))
}

// ID is the resolver for the id field.
func (r *favoriteMovieResolver) ID(ctx context.Context, obj *structs.FavoriteMovie) (int32, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the userId field.
func (r *favoriteMovieResolver) UserID(ctx context.Context, obj *structs.FavoriteMovie) (int32, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// MovieID is the resolver for the movieId field.
func (r *favoriteMovieResolver) MovieID(ctx context.Context, obj *structs.FavoriteMovie) (int32, error) {
	panic(fmt.Errorf("not implemented: MovieID - movieId"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, nickName string, username string, password string) (*structs.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int32) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int32, nickName *string, username *string, password *string) (*structs.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// AddFavoriteMovie is the resolver for the addFavoriteMovie field.
func (r *mutationResolver) AddFavoriteMovie(ctx context.Context, userID int32, movieID int32, title string, posterPath string, voteAverage float64) (*structs.FavoriteMovie, error) {
	panic(fmt.Errorf("not implemented: AddFavoriteMovie - addFavoriteMovie"))
}

// RemoveFavoriteMovie is the resolver for the removeFavoriteMovie field.
func (r *mutationResolver) RemoveFavoriteMovie(ctx context.Context, userID int32, movieID int32) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveFavoriteMovie - removeFavoriteMovie"))
}

// MarkMovieAsWatched is the resolver for the markMovieAsWatched field.
func (r *mutationResolver) MarkMovieAsWatched(ctx context.Context, userID int32, movieID int32, watched bool) (*structs.FavoriteMovie, error) {
	panic(fmt.Errorf("not implemented: MarkMovieAsWatched - markMovieAsWatched"))
}

// AddFavoriteGenre is the resolver for the addFavoriteGenre field.
func (r *mutationResolver) AddFavoriteGenre(ctx context.Context, userID int32, genreID int32) (*structs.FavoriteGenre, error) {
	panic(fmt.Errorf("not implemented: AddFavoriteGenre - addFavoriteGenre"))
}

// RemoveFavoriteGenre is the resolver for the removeFavoriteGenre field.
func (r *mutationResolver) RemoveFavoriteGenre(ctx context.Context, userID int32, genreID int32) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveFavoriteGenre - removeFavoriteGenre"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id int32) (*structs.User, error) {
  return &structs.User{ID: id, Username: "John Doe", FavoriteMovies: []*structs.FavoriteMovie{}}, nil
}

// GetAllGenres is the resolver for the getAllGenres field.
func (r *queryResolver) GetAllGenres(ctx context.Context) ([]*structs.Genre, error) {
	genres, err := repository.GetAllGenres(r.DB)
	if err != nil {
		log.Println(err)
		return nil, err
	}

	genrePointers := make([]*structs.Genre, len(genres))
	for i := range genres {
		genrePointers[i] = &genres[i]
	}
	return genrePointers, nil
}

// GetFavoriteMovies is the resolver for the getFavoriteMovies field.
func (r *queryResolver) GetFavoriteMovies(ctx context.Context, userID int32) ([]*structs.FavoriteMovie, error) {
  favMovies, err := repository.GetFavMovies(userID)
  if err != nil {
    log.Println(err)
  }

  favMoviePointers := make([]*structs.FavoriteMovie, len(favMovies))
  for i := range favMovies {
    favMoviePointers[i] = &favMovies[i]
  }
  return favMoviePointers, nil
}

// GetMovieDetails is the resolver for the getMovieDetails field.
func (r *queryResolver) GetMovieDetails(ctx context.Context, movieID int32) (*structs.MovieDetails, error) {
	panic(fmt.Errorf("not implemented: GetMovieDetails - getMovieDetails"))
}

// FilterMovies is the resolver for the filterMovies field.
func (r *queryResolver) FilterMovies(ctx context.Context, filter structs.MovieFilter) (*structs.ResponseFilteredMovies, error) {
	panic(fmt.Errorf("not implemented: FilterMovies - filterMovies"))
}

// FavoriteGenre returns FavoriteGenreResolver implementation.
func (r *Resolver) FavoriteGenre() FavoriteGenreResolver { return &favoriteGenreResolver{r} }

// FavoriteMovie returns FavoriteMovieResolver implementation.
func (r *Resolver) FavoriteMovie() FavoriteMovieResolver { return &favoriteMovieResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type favoriteGenreResolver struct{ *Resolver }
type favoriteMovieResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
