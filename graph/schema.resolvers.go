package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"myfavouritemovies/models"
	"myfavouritemovies/repository"
	"myfavouritemovies/security"
	tmdbService "myfavouritemovies/service/tmdb"
	tokenService "myfavouritemovies/service/tokens"
	"myfavouritemovies/utils"
	"net/http"
)

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, nickName string, userName string, password string) (*models.User, error) {
	hash, err := security.GenerateHashPassword(password)
	if err != nil {
		return nil, utils.HandleError("Failed to generate hash password", "500")
	}
	user := &models.User{
		NickName:     nickName,
		UserName:     userName,
		PasswordHash: hash,
	}
	if err := repository.AddUser(user); err != nil {
		return nil, utils.HandleError("DB Error", "500")
	}

	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context) (bool, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return false, utils.HandleError("Unauthorized", "401")
	}
	if err := repository.DeleteUser(userID); err != nil {
		return false, utils.HandleError("DB Error", "500")
	}

	return true, nil
}

// UpdateNickName is the resolver for the updateNickName field.
func (r *mutationResolver) UpdateNickName(ctx context.Context, nickName string) (*models.User, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return nil, utils.HandleError("Unauthorized", "401")
	}
	user, err := repository.GetUserByID(userID)
	if err != nil {
		return nil, utils.HandleError("DB Error", "500")
	}
	if err := repository.UpdateNickName(user, nickName); err != nil {
		return nil, utils.HandleError("DB Error", "500")
	}

	return user, nil
}

// UpdatePassWord is the resolver for the updatePassWord field.
func (r *mutationResolver) UpdatePassWord(ctx context.Context, password string) (*models.User, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return nil, utils.HandleError("Unauthorized", "401")
	}
	user, err := repository.GetUserByID(userID)
	if err != nil {
		return nil, utils.HandleError("DB Error", "500")
	}
	if err := repository.UpdatePassWord(user, password); err != nil {
		return nil, utils.HandleError("DB Error", "500")
	}

	return user, nil
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, signInInput models.SignInInput) (*models.SignInResponse, error) {
	if err := security.SignIn(signInInput.Username, signInInput.Password); err != nil {
		return nil, utils.HandleError("Invalid username or password", "401")
	}
	user, errUser := repository.GetUserByUserName(signInInput.Username)
	if errUser != nil {
		return nil, utils.HandleError("DB Error", "500")
	}

	accessToken, refreshToken, err := tokenService.Generate(user.ID)
	if err != nil {
		return nil, utils.HandleError("Failed to generate tokens", "500")
	}

	writer, ok := ctx.Value("httpResponseWriter").(http.ResponseWriter)
	if !ok {
		return nil, utils.HandleError("httpResponseWriter not found", "500")
	}

	refreshTokenClaims, err := tokenService.Validate(refreshToken)
	if err != nil {
		return nil, utils.HandleError(err.Error(), "401")
	}
	_, errSession := repository.AddSession(&models.Session{
		ID:        refreshTokenClaims.ID,
		UserID:    user.ID,
		ExpiresAt: refreshTokenClaims.ExpiresAt.Time,
	})
	if errSession != nil {
		return nil, utils.HandleError("DB Error", "500")
	}
	utils.SetTokenInCookie(writer, refreshToken)

	return &models.SignInResponse{User: user, Token: accessToken}, nil
}

// LogOut is the resolver for the logOut field.
func (r *mutationResolver) LogOut(ctx context.Context) (bool, error) {
	_, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return false, utils.HandleError("Unauthorized", "401")
	}
	writer, ok := ctx.Value("httpResponseWriter").(http.ResponseWriter)
	if !ok {
		return false, utils.HandleError("httpResponseWriter not found", "500")
	}
	request, ok := ctx.Value("httpRequest").(*http.Request)
	if !ok {
		return false, utils.HandleError("httpRequest not found", "500")
	}
	refreshToken, errRefreshToken := utils.GetTokenFromCookie(request)
	if errRefreshToken != nil {
		return false, utils.HandleError("Unauthorized", "401")
	}
	claims, err := tokenService.Validate(refreshToken)
	if err != nil {
		return false, utils.HandleError(err.Error(), "401")
	}

	if err := repository.AddTokenInBlackList(claims); err != nil {
		return false, utils.HandleError("DB Error", "500")
	}

	if err := repository.DeleteSession(claims.ID); err != nil {
		return false, utils.HandleError("DB Error", "500")
	}

	utils.DeleteTokenFromCookie(writer)

	return true, nil
}

// AddFavoriteMovie is the resolver for the addFavoriteMovie field.
func (r *mutationResolver) AddFavoriteMovie(ctx context.Context, movie models.MovieInput) (*models.FavoriteMovie, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return nil, utils.HandleError("Unauthorized", "401")
	}
	favMovie, err := repository.AddFavoriteMovie(userID, movie)
	if err != nil {
		return nil, utils.HandleError("DB Error", "500")
	}

	return favMovie, nil
}

// DeleteFavoriteMovie is the resolver for the deleteFavoriteMovie field.
func (r *mutationResolver) DeleteFavoriteMovie(ctx context.Context, favMovieID uint) (bool, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return false, utils.HandleError("Unauthorized", "401")
	}
	if err := repository.DeleteFavoriteMovie(favMovieID, userID); err != nil {
		return false, utils.HandleError("DB Error", "500")
	}

	return true, nil
}

// ToggleWatchedStatus is the resolver for the toggleWatchedStatus field.
func (r *mutationResolver) ToggleWatchedStatus(ctx context.Context, favMovieID uint) (*models.FavoriteMovie, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return nil, utils.HandleError("Unauthorized", "401")
	}
	favMovie, err := repository.ToggleWatchedStatus(favMovieID, userID)
	if err != nil {
		return nil, utils.HandleError("DB Error", "500")
	}

	return favMovie, nil
}

// AddFavoriteGenre is the resolver for the addFavoriteGenre field.
func (r *mutationResolver) AddFavoriteGenre(ctx context.Context, genreID uint) (uint, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return 0, utils.HandleError("Unauthorized", "401")
	}
	if err := repository.AddFavoriteGenre(userID, genreID); err != nil {
		return 0, utils.HandleError("DB Error", "500")
	}

	return genreID, nil
}

// DeleteFavoriteGenre is the resolver for the deleteFavoriteGenre field.
func (r *mutationResolver) DeleteFavoriteGenre(ctx context.Context, genreID uint) (bool, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return false, utils.HandleError("Unauthorized", "401")
	}
	if err := repository.DeleteFavoriteGenre(userID, genreID); err != nil {
		return false, utils.HandleError("DB Error", "500")
	}

	return true, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context) (string, error) {
	request, ok := ctx.Value("httpRequest").(*http.Request)
	if !ok {
		return "", utils.HandleError("httpRequest not found", "500")
	}
	writer, ok := ctx.Value("httpResponseWriter").(http.ResponseWriter)
	if !ok {
		return "", utils.HandleError("httpResponseWriter not found", "500")
	}
	currentRefreshTokenCookie, err := request.Cookie("jwtRefresh")
	if err != nil {
		return "", utils.HandleError("No refresh token in cookies", "401")
	}
	currentClaimsRefresh, err := tokenService.Validate(currentRefreshTokenCookie.Value)
	if err != nil {
		return "", utils.HandleError(err.Error(), "401")
	}
	newAccessToken, newRefreshToken, err := tokenService.Refresh(currentRefreshTokenCookie.Value)
	if err != nil {
		return "", utils.HandleError(err.Error(), "401")
	}
	newClaimsRefresh, err := tokenService.Validate(newRefreshToken)
	if err != nil {
		return "", utils.HandleError(err.Error(), "401")
	}
	if err := repository.AddTokenInBlackList(currentClaimsRefresh); err != nil {
		return "", utils.HandleError("DB Error", "500")
	}
	if err := utils.UpdateRefreshTokenInDB(currentClaimsRefresh.ID, newClaimsRefresh.ID, newClaimsRefresh.ExpiresAt.Time); err != nil {
		return "", utils.HandleError("DB Error", "500")
	}
	utils.SetTokenInCookie(writer, newRefreshToken)

	return newAccessToken, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context) (*models.User, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return nil, utils.HandleError("Unauthorized", "401")
	}
	user, err := repository.GetUserByID(userID)
	if err != nil {
		return nil, utils.HandleError("DB Error", "500")
	}

	return user, nil
}

// GetAllGenres is the resolver for the getAllGenres field.
func (r *queryResolver) GetAllGenres(ctx context.Context) ([]*models.Genre, error) {
	_, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return nil, utils.HandleError("Unauthorized", "401")
	}
	genres, err := repository.GetAllGenres()
	if err != nil {
		return nil, utils.HandleError("DB Error", "500")
	}

	return genres, nil
}

// GetAllFavoriteGenres is the resolver for the getAllFavoriteGenres field.
func (r *queryResolver) GetAllFavoriteGenres(ctx context.Context) ([]uint, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return []uint{}, utils.HandleError("Unauthorized", "401")
	}
	favGenres, err := repository.GetFavoriteGenres(userID)
	if err != nil {
		return []uint{}, utils.HandleError("DB Error", "500")
	}

	return favGenres, nil
}

// GetFavoriteMovies is the resolver for the getFavoriteMovies field.
func (r *queryResolver) GetFavoriteMovies(ctx context.Context, page uint, moviesPerPage uint) (*models.GetFavoriteMoviesResponse, error) {
	userID, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return nil, utils.HandleError("Unauthorized", "401")
	}
	favMoviesResponse, err := repository.GetFavoriteMovies(userID, page, moviesPerPage)
	if err != nil {
		return nil, utils.HandleError("DB Error", "500")
	}

	return favMoviesResponse, nil
}

// GetMovieDetails is the resolver for the getMovieDetails field.
func (r *queryResolver) GetMovieDetails(ctx context.Context, movieID uint) (*models.MovieDetails, error) {
	_, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return nil, utils.HandleError("Unauthorized", "401")
	}
	movieDetails, err := tmdbService.FetchMovieDetails(movieID)
	if err != nil {
		return nil, utils.HandleError("Service Unavailable", "503")
	}

	return movieDetails, nil
}

// GetFilteredMovies is the resolver for the getFilteredMovies field.
func (r *queryResolver) GetFilteredMovies(ctx context.Context, filter models.MovieFilter) ([]*models.Movie, error) {
	_, errUser := utils.GetContextUserID(ctx)
	if errUser != nil {
		return nil, utils.HandleError("Unauthorized", "401")
	}
	filteredMovies, err := tmdbService.FetchFilteredMovies(filter)
	if err != nil {
		return nil, utils.HandleError("Service Unavailable", "503")
	}

	return filteredMovies, nil
}

// GetTest is the resolver for the getTest field.
func (r *queryResolver) GetTest(ctx context.Context) (string, error) {
	return "testString", nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	type Resolver struct{}
*/
