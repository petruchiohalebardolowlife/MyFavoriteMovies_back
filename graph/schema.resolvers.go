package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"myfavouritemovies/repository"
	"myfavouritemovies/service"
	"myfavouritemovies/structs"
	"myfavouritemovies/utils"
)

// ReleaseDate is the resolver for the releaseDate field.
func (r *movieResolver) ReleaseDate(ctx context.Context, obj *structs.Movie) (string, error) {
	panic(fmt.Errorf("not implemented: ReleaseDate - releaseDate"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, nickName string, userName string, password string) (*structs.User, error) {
	user := &structs.User{
		NickName: nickName,
		UserName: userName,
		Password: password,
	}
	if err := repository.AddUser(user); err != nil {
		return nil, err
	}

	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context) (bool, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return false, errUser
	}
	if err := repository.DeleteUser(user.ID); err != nil {
		return false, err
	}

	return true, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, nickName *string, password *string) (bool, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return false, errUser
	}
	if err := repository.UpdateUser(user, nickName, password); err != nil {
		return false, err
	}

	return true, nil
}

// AddFavoriteMovie is the resolver for the addFavoriteMovie field.
func (r *mutationResolver) AddFavoriteMovie(ctx context.Context, movie structs.MovieInput) (bool, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return false, errUser
	}
	if err := repository.AddFavoriteMovie(user.ID, movie); err != nil {
		return false, err
	}
	return true, nil
}

// RemoveFavoriteMovie is the resolver for the removeFavoriteMovie field.
func (r *mutationResolver) DeleteFavoriteMovie(ctx context.Context, movieID int32) (bool, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return false, errUser
	}
	if err := repository.DeleteFavoriteMovie(user.ID, movieID); err != nil {
		return false, err
	}
	return true, nil
}

// ToggleWatchedStatus is the resolver for the markMovieAsWatched field.
func (r *mutationResolver) ToggleWatchedStatus(ctx context.Context, movieID int32) (bool, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return false, errUser
	}
	if err := repository.ToggleWatchedStatus(user.ID, movieID); err != nil {
		return false, err
	}
	return true, nil
}

// AddFavoriteGenre is the resolver for the addFavoriteGenre field.
func (r *mutationResolver) AddFavoriteGenre(ctx context.Context, genreID int32) (bool, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return false, errUser
	}
	if err := repository.AddFavoriteGenre(user.ID, genreID); err != nil {
		return false, err
	}
	return true, nil
}

// RemoveFavoriteGenre is the resolver for the removeFavoriteGenre field.
func (r *mutationResolver) DeleteFavoriteGenre(ctx context.Context, genreID int32) (bool, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return false, errUser
	}
	if err := repository.DeleteFavoriteGenre(user.ID, genreID); err != nil {
		return false, err
	}
	return true, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context) (*structs.User, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	return user, nil
}

// GetAllGenres is the resolver for the getAllGenres field.
func (r *queryResolver) GetAllGenres(ctx context.Context) ([]*structs.Genre, error) {
	genres, err := repository.GetAllGenres()
	if err != nil {
		return nil, err
	}

	return genres, nil
}

// GetAllFavoriteGenres is the resolver for the getAllFavoriteGenres field.
func (r *queryResolver) GetAllFavoriteGenres(ctx context.Context) ([]*structs.FavoriteGenre, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	favGenres, err := repository.GetFavoriteGenres(user.ID)
	if err != nil {
		return nil, err
	}
	return favGenres, nil
}

// GetFavoriteMovies is the resolver for the getFavoriteMovies field.
func (r *queryResolver) GetFavoriteMovies(ctx context.Context) ([]*structs.FavoriteMovie, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	favMovies, err := repository.GetFavoriteMovies(user.ID)
	if err != nil {
		return nil, err
	}
	return favMovies, nil
}

// GetMovieDetails is the resolver for the getMovieDetails field.
func (r *queryResolver) GetMovieDetails(ctx context.Context, movieID int32) (*structs.MovieDetails, error) {
	movieDetails, err := service.FetchMovieDetails(movieID)
	if err != nil {
		return nil, err
	}

	return movieDetails, nil
}

// GetFilteredMovies is the resolver for the getFilteredMovies field.
func (r *queryResolver) GetFilteredMovies(ctx context.Context, filter structs.MovieFilter) ([]*structs.Movie, error) {
	filteredMovies, err := service.FetchFilteredMovies(filter)
	if err != nil {
		return nil, err
	}
	return filteredMovies, nil
}

// Movie returns MovieResolver implementation.
func (r *Resolver) Movie() MovieResolver { return &movieResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type movieResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
