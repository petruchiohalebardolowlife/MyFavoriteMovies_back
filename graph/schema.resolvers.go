package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"errors"
	"myfavouritemovies/models"
	"myfavouritemovies/repository"
	"myfavouritemovies/security"
	"myfavouritemovies/service"
	"myfavouritemovies/utils"
	"net/http"
	"time"
)

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, nickName string, userName string, password string) (*models.User, error) {
	hash, err := security.GenerateHashPassword(password)
	if err != nil {
		return nil, err
	}
	user := &models.User{
		NickName:     nickName,
		UserName:     userName,
		PasswordHash: hash,
	}
	if err := repository.AddUser(user); err != nil {
		return nil, err
	}

	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context) (bool, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return false, errUser
	}
	if err := repository.DeleteUser(user.ID); err != nil {
		return false, err
	}

	return true, nil
}

// UpdateNickName is the resolver for the updateNickName field.
func (r *mutationResolver) UpdateNickName(ctx context.Context, nickName string) (*models.User, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	if err := repository.UpdateNickName(user, nickName); err != nil {
		return nil, err
	}

	return user, nil
}

// UpdatePassWord is the resolver for the updatePassWord field.
func (r *mutationResolver) UpdatePassWord(ctx context.Context, password string) (*models.User, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	if err := repository.UpdatePassWord(user, password); err != nil {
		return nil, err
	}

	return user, nil
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, signInInput models.SignInInput) (*models.SignInRes, error) {
	if err := security.SignIn(signInInput.Username, signInInput.Password); err != nil {
		return nil, err
	}

	accessToken, err := security.GenerateToken(signInInput.Username, 15*time.Minute)
	if err != nil {
		return nil, err
	}

  refreshToken, err := security.GenerateToken(signInInput.Username, 24*time.Hour)
	if err != nil {
		return nil, err
	}

  session, errSession := repository.AddSession(&models.Session{
    ID: refreshToken.Claims.RegisteredClaims.ID,
    UserID: refreshToken.Claims.UserID,
    RefreshToken: refreshToken.Value,
    IsRevoked: false,
    ExpiresAt: refreshToken.Claims.RegisteredClaims.ExpiresAt.Time,
  })
  if errSession != nil {
    return nil, errSession
  }
  user, errUser := utils.GetUserByUserName(signInInput.Username)
	if errUser != nil {
		return nil, errUser
	}

  res:=&models.SignInRes{
    SessionID: session.ID,
    AccessToken: accessToken.Value,
    RefreshToken: refreshToken.Value,
    AccessTokenExpiresAt: accessToken.Claims.RegisteredClaims.ExpiresAt.Time,
    RefreshTokenExpiresAt: refreshToken.Claims.RegisteredClaims.ExpiresAt.Time,
    User: user,
  }
	writer, ok := ctx.Value("httpResponseWriter").(http.ResponseWriter)
	if !ok {
		return nil, errors.New("response writer not found")
	}
  writer.Header().Set("Content-Type", "applcation/json")
  writer.WriteHeader(http.StatusOK)
	// http.SetCookie(writer, &http.Cookie{
	// 	Name:     "jwt_access_token",
	// 	Value:    accessToken,
	// 	Path:     "/",
	// 	HttpOnly: true,
	// 	SameSite: http.SameSiteLaxMode,
	// 	Expires:  time.Now().Add(24 * time.Hour),
	// })

	return res, nil
}

// AddFavoriteMovie is the resolver for the addFavoriteMovie field.
func (r *mutationResolver) AddFavoriteMovie(ctx context.Context, movie models.MovieInput) (*models.FavoriteMovie, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	favMovie, err := repository.AddFavoriteMovie(user.ID, movie)
	if err != nil {
		return nil, err
	}

	return favMovie, nil
}

// DeleteFavoriteMovie is the resolver for the deleteFavoriteMovie field.
func (r *mutationResolver) DeleteFavoriteMovie(ctx context.Context, favMovieID uint) (bool, error) {
	_, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return false, errUser
	}
	if err := repository.DeleteFavoriteMovie(favMovieID); err != nil {
		return false, err
	}

	return true, nil
}

// ToggleWatchedStatus is the resolver for the toggleWatchedStatus field.
func (r *mutationResolver) ToggleWatchedStatus(ctx context.Context, favMovieID uint) (*models.FavoriteMovie, error) {
	_, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	favMovie, err := repository.ToggleWatchedStatus(favMovieID)
	if err != nil {
		return nil, err
	}

	return favMovie, nil
}

// AddFavoriteGenre is the resolver for the addFavoriteGenre field.
func (r *mutationResolver) AddFavoriteGenre(ctx context.Context, genreID uint) (uint, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return 0, errUser
	}
	if err := repository.AddFavoriteGenre(user.ID, genreID); err != nil {
		return 0, err
	}

	return genreID, nil
}

// DeleteFavoriteGenre is the resolver for the deleteFavoriteGenre field.
func (r *mutationResolver) DeleteFavoriteGenre(ctx context.Context, genreID uint) (bool, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return false, errUser
	}
	if err := repository.DeleteFavoriteGenre(user.ID, genreID); err != nil {
		return false, err
	}

	return true, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context) (*models.User, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}

	return user, nil
}

// GetAllGenres is the resolver for the getAllGenres field.
func (r *queryResolver) GetAllGenres(ctx context.Context) ([]*models.Genre, error) {
	_, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	genres, err := repository.GetAllGenres()
	if err != nil {
		return nil, err
	}

	return genres, nil
}

// GetAllFavoriteGenres is the resolver for the getAllFavoriteGenres field.
func (r *queryResolver) GetAllFavoriteGenres(ctx context.Context) ([]uint, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return []uint{}, errUser
	}
	favGenres, err := repository.GetFavoriteGenres(user.ID)
	if err != nil {
		return []uint{}, err
	}

	return favGenres, nil
}

// GetFavoriteMovies is the resolver for the getFavoriteMovies field.
func (r *queryResolver) GetFavoriteMovies(ctx context.Context) ([]*models.FavoriteMovie, error) {
	user, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	favMovies, err := repository.GetFavoriteMovies(user.ID)
	if err != nil {
		return nil, err
	}

	return favMovies, nil
}

// GetMovieDetails is the resolver for the getMovieDetails field.
func (r *queryResolver) GetMovieDetails(ctx context.Context, movieID uint) (*models.MovieDetails, error) {
	_, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	movieDetails, err := service.FetchMovieDetails(movieID)
	if err != nil {
		return nil, err
	}

	return movieDetails, nil
}

// GetFilteredMovies is the resolver for the getFilteredMovies field.
func (r *queryResolver) GetFilteredMovies(ctx context.Context, filter models.MovieFilter) ([]*models.Movie, error) {
	_, errUser := utils.GetContextUser(ctx)
	if errUser != nil {
		return nil, errUser
	}
	filteredMovies, err := service.FetchFilteredMovies(filter)
	if err != nil {
		return nil, err
	}

	return filteredMovies, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	type Resolver struct{}
*/
