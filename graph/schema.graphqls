type User {
  id: ID!
  nickName: String!
  userName: String!
  password: String!
  favoriteMovies: [FavoriteMovie!]!
  favoriteGenres: [FavoriteGenre!]!
}

type Genre {
  id: ID!
  name: String!
}

type FavoriteMovie {
  userID: ID!
  movieID: ID!
  title: String!
  posterPath: String!
  voteAverage: Float!
  watched: Boolean!
  genres: [Genre!]!
}

type Movie {
  id: ID!
  title: String!
  posterPath: String!
  voteAverage: Float!
  genreIDs: [ID!]!
  releaseDate: String!
}

type FavoriteGenre {
  userID: ID!
  genreID: ID!
}

type MovieDetails {
  title: String!
  rating: Float!
  releaseDate: String!
  posterPath: String!
  genres: [Genre!]!
  overview: String!
}

input MovieFilter {
  genreIDs: [Int!]
  popularity: Float
  year: Int
  page: Int
}

input MovieInput {
  movieID: ID!
  title: String!
  posterPath: String!
  voteAverage: Float!
  genreIDs: [ID!]!
}

type ResponseFilteredMovies {
  page: Int!
  results: [Movie!]
}

input SignInInput {
  username: String!
  password: String!
}

type Query {
  getUser: User!
  getAllGenres: [Genre!]!
  getAllFavoriteGenres: [FavoriteGenre!]
  getFavoriteMovies: [FavoriteMovie!]
  getMovieDetails(movieID: ID!): MovieDetails!
  getFilteredMovies(filter: MovieFilter!): [Movie]
}

type Mutation {
  addUser(nickName: String!, userName: String!, password: String!): Boolean!
  deleteUser: Boolean!
  updateUser(nickName: String, password: String): Boolean!

  addFavoriteMovie(movie: MovieInput!): Boolean!
  deleteFavoriteMovie(movieID: ID!): Boolean!
  toggleWatchedStatus(movieID: ID!): Boolean!

  addFavoriteGenre(genreID: ID!): Boolean!
  deleteFavoriteGenre(genreID: ID!): Boolean!
}
