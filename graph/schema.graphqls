type User {
  id: ID!
  nickName: String!
  userName: String!
  password: String!
  favoriteMovies: [FavoriteMovie!]!
  favoriteGenres: [FavoriteGenre!]!
}

type Genre {
  id: ID!
  name: String!
}

type FavoriteMovie {
  userID: ID!
  movieID: ID!
  title: String!
  posterPath: String!
  voteAverage: Float!
  watched: Boolean!
  genres: [Genre!]!
}

type Movie {
  id: ID!
  title: String!
  posterPath: String!
  voteAverage: Float!
  genreIDs: [ID!]!
}

type FavoriteGenre {
  userID: ID!
  genreID: ID!
}

type MovieDetails {
  title: String!
  rating: Float!
  releaseDate: String!
  posterPath: String!
  genres: [Genre!]!
  overview: String!
}

input MovieFilter {
  genreIDs: [Int!]
  popularity: Float
  year: Int
  page: Int
}

type ResponseFilteredMovies {
  page: Int!
  results: [Movie!]
}

input SignInInput {
  username: String!
  password: String!
}

type Query {
  getUser: User!
  getAllGenres: [Genre!]!
  getAllFavoriteGenres(userID: ID!): [FavoriteGenre!]
  getFavoriteMovies(userID: ID!): [FavoriteMovie!]
  getMovieDetails(movieID: ID!): MovieDetails!
  getFilteredMovies(filter: MovieFilter!): ResponseFilteredMovies!
}

type Mutation {
  createUser(nickName: String!, userName: String!, password: String!): User!
  deleteUser: Boolean!
  updateUser(nickName: String, password: String): Boolean!

  addFavoriteMovie(
    userID: ID!
    movieID: ID!
    title: String!
    posterPath: String!
    voteAverage: Float!
  ): FavoriteMovie!
  removeFavoriteMovie(userID: ID!, movieID: ID!): Boolean!
  markMovieAsWatched(
    userID: ID!
    movieID: ID!
    watched: Boolean!
  ): FavoriteMovie!

  addFavoriteGenre(userID: ID!, genreID: ID!): FavoriteGenre!
  removeFavoriteGenre(userID: ID!, genreID: ID!): Boolean!
}
